"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[21486],{68554:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>c,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var s=n(87462),r=(n(67294),n(3905));n(8209);const a={title:"3rd day of tracing INET6: Application/UDPBasicApp",tags:["IPv6","OMNET++"],date:new Date("2005-05-12T03:23:42.000Z")},o=void 0,i={permalink:"/ipv6/3rd-day-of-tracing-INET6-Application-UDPBasicApp",editUrl:"https://github.com/gasolin/blog/edit/main/website/blog/blog/ipv6/3rd-day-of-tracing-INET6-Application-UDPBasicApp.md",source:"@site/blog/ipv6/3rd-day-of-tracing-INET6-Application-UDPBasicApp.md",title:"3rd day of tracing INET6: Application/UDPBasicApp",description:"If the dest_addresses parameter contains more than one address,",date:"2005-05-12T03:23:42.000Z",formattedDate:"May 12, 2005",tags:[{label:"IPv6",permalink:"/tags/i-pv-6"},{label:"OMNET++",permalink:"/tags/omnet"}],readingTime:1.535,hasTruncateMarker:!1,authors:[],frontMatter:{title:"3rd day of tracing INET6: Application/UDPBasicApp",tags:["IPv6","OMNET++"],date:"2005-05-12T03:23:42.000Z"},prevItem:{title:"Build an INET Application layer Module: Initial Test",permalink:"/ipv6/Build-an-INET-Application-layer-Module-Initial-Test"},nextItem:{title:"12th. day of porting INET6 (Mile Stone: Pre-work Finished)",permalink:"/ipv6/12th-day-of-porting-INET6-Mile-Stone-Pre-work-Finished"}},d={authorsImageUrls:[]},l=[],p={toc:l};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,s.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"If the dest_addresses parameter contains more than one address,\none of them is randomly chosen for each packet."),(0,r.kt)("p",null,"An address may be given in the dotted decimal notation, or with the module name. (The IPAddressResolver class is used to resolve the address.)"),(0,r.kt)("p",null,'To disable the model, set dest_addresses to "".'),(0,r.kt)("p",null,"The peer can be UDPSink or another UDPBasicApp (it handles received packets exactly like UDPSink)."),(0,r.kt)("hr",null),(0,r.kt)("p",null,"UDPAppBase:\n*** void UDPAppBase::bindToPort(int port)"),(0,r.kt)("p",null,"   cMessage ",(0,r.kt)("em",{parentName:"p"},'msg = new cMessage ("UDP_C_BIND", UDP_C_BIND);\n\u5efa\u7acb\u65b0 message "'),'msg", \u4f7f\u7528 UDP_C_BIND \u683c\u5f0f'),(0,r.kt)("p",null,"   UDPControlInfo ",(0,r.kt)("em",{parentName:"p"},'ctrl = new UDPControlInfo ();\n\u5efa\u7acb\u65b0 record "'),'ctrl"'),(0,r.kt)("p",null,"   ctrl->setSrcPort (port);\n\u5c07 port \u53c3\u6578\u8a2d\u5b9a\u9032 ctrl \u7684 SrcPort \u53c3\u6578\u4e2d"),(0,r.kt)("p",null,"   msg->setControlInfo (ctrl);\n\u5c07 ctrl \u5305\u9032 msg \u4e2d\u7684 ControlInfo \u53c3\u6578\u4e2d"),(0,r.kt)("p",null,'   send (msg, "to_udp");\n\u9001\u5230\u50b3\u8f38\u5c64\u7684 udp \u505a\u8655\u7406'),(0,r.kt)("p",null,"void UDPAppBase::sendToUDP(cMessage *msg, int srcPort, const IPvXAddress& destAddr, int destPort)"),(0,r.kt)("p",null,"msg->setKind(UDP_C_DATA);\nSend message to UDP, with the appropriate control info attached"),(0,r.kt)("p",null,"\u5176\u4ed6\u985e\u4f3c bindToPort ()"),(0,r.kt)("hr",null),(0,r.kt)("p",null,"UDPSink:\nvoid UDPSink::initialize()"),(0,r.kt)("p",null,"WATCH (numReceived);\nTKenv \u4e2d\u986f\u793a numReceived \u8b8a\u6578"),(0,r.kt)("p",null,"if (port!=-1)\nbindToPort (port);\nport \u6578\u5b57\u6b63\u5e38\u5c31\u5c07 port \u53c3\u6578\u7e6b\u7d50\u5230\u57e0\u865f"),(0,r.kt)("p",null,"void UDPSink::handleMessage (cMessage *msg)\n\u8655\u7406\u5c01\u5305\u4e26\u79c0 numReceived \u72c0\u614b\u5728\u756b\u9762\u4e2d"),(0,r.kt)("p",null,"void UDPSink::processPacket (cMessage *msg)\n\u6536\u5230\u5c01\u5305\u5f8c\u522a\u9664\uff0cnumReceived \u6578 +1"),(0,r.kt)("hr",null),(0,r.kt)("p",null,"UDPBaseApp"),(0,r.kt)("p",null,"const char ",(0,r.kt)("em",{parentName:"p"},'destAddrs = par ("dest_addresses");\n\u8b80\u5165\u76ee\u7684\u4f4d\u5740\ncStringTokenizer tokenizer (destAddrs);\nconst char '),"token;\nwhile ((token = tokenizer.nextToken ())!=NULL)\ndestAddresses.push_back (IPAddressResolver ().resolve (token));\n\u89e3\u6790 string \u6210\u53ef\u8fa8\u8b58\u7684\u4f4d\u5740\u683c\u5f0f"),(0,r.kt)("p",null,"void UDPBasicApp::sendPacket ()\nIPvXAddress destAddr = chooseDestAddr ();\n\u8d85\u904e\u4e00\u500b\u76ee\u7684\u4f4d\u5740\u6642\u5f9e\u4e2d\u9078\u64c7\u96a8\u6a5f\u76ee\u7684\u4f4d\u5740"),(0,r.kt)("p",null,"IPvXAddress UDPBasicApp::chooseDestAddr ()\n{\nint k = intrand (destAddresses.size ());\ndestAddresses.size () \u5373\u76ee\u6a19\u4f4d\u5740\u6578\u91cf\uff0cintrand (n) \u5f9e n \u4e2d\u96a8\u6a5f\u53d6\u4e00\u6578"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"return destAddresses[k];\n")),(0,r.kt)("p",null,"}"))}c.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[55047],{34801:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>g,frontMatter:()=>p,metadata:()=>o,toc:()=>d});var i=t(87462),a=(t(67294),t(3905));t(8209);const p={title:"2nd day of tracing INET6: Application/PingAPP",tags:["IPv6","OMNET++"],date:new Date("2005-05-08T09:42:38.000Z")},l=void 0,o={permalink:"/ipv6/2nd-day-of-tracing-INET6-Application-PingAPP",editUrl:"https://github.com/gasolin/blog/edit/main/website/blog/blog/ipv6/2nd-day-of-tracing-INET6-Application-PingAPP.md",source:"@site/blog/ipv6/2nd-day-of-tracing-INET6-Application-PingAPP.md",title:"2nd day of tracing INET6: Application/PingAPP",description:"Define_Module(PingApp);",date:"2005-05-08T09:42:38.000Z",formattedDate:"May 8, 2005",tags:[{label:"IPv6",permalink:"/tags/i-pv-6"},{label:"OMNET++",permalink:"/tags/omnet"}],readingTime:.885,hasTruncateMarker:!1,authors:[],frontMatter:{title:"2nd day of tracing INET6: Application/PingAPP",tags:["IPv6","OMNET++"],date:"2005-05-08T09:42:38.000Z"},prevItem:{title:"FreeBSD TCP/IP-Stack to OMNeT++",permalink:"/ipv6/FreeBSD-TCP-IP-Stack-to-OMNeT"},nextItem:{title:"Tracegraph for NS2",permalink:"/ipv6/Tracegraph-for-NS2"}},s={authorsImageUrls:[]},d=[],r={toc:d};function g(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,i.Z)({},r,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Define_Module (PingApp);\n\u6a21\u7d44\u540d\u7a31\u662f PingApp"),(0,a.kt)("p",null,"PingApp::initialize()"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"\u8b80\u5165 omnetpp.ini \u4e2d\u8a2d\u5b9a\u7684\u53c3\u6578."),(0,a.kt)("li",{parentName:"ol"},"\u5728 TKenv \u4e2d\u76e3\u8996 ")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"sendSeqNo"),(0,a.kt)("li",{parentName:"ul"},"expectedReplySeqNo"),(0,a.kt)("li",{parentName:"ul"},"dropCount"),(0,a.kt)("li",{parentName:"ul"},"outOfOrderArrivalCount\n\u9019\u5e7e\u500b\u7d50\u679c PingApp::handleMessage (cMessage *msg)")),(0,a.kt)("p",null,"if (msg->isSelfMessage ())\n\u82e5\u8a0a\u606f\u4f86\u81ea\u672c\u8eab\u7bc0\u9ede"),(0,a.kt)("p",null,'destAddr = IPAddressResolver ().resolve (par ("destAddr"));\n\u89e3\u6790\u76ee\u7684\u4f4d\u5740\u8a2d\u5b9a'),(0,a.kt)("p",null,"\u4f86\u81ea\u5176\u4ed6\u7bc0\u9ede\u5247\u555f\u52d5\u56de\u8986\u6a5f\u5236"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"processPingResponse(check_and_cast<pingpayload>(msg));")),(0,a.kt)("p",null,"void PingApp::sendPing()"),(0,a.kt)("p",null,"PingPayload ",(0,a.kt)("em",{parentName:"p"},"msg = new PingPayload (name);\n\u65b0\u589e\u5c01\u5305\uff0c\u63a5\u8457\u4e0b\u9762\u7167\u8457\u5ba3\u544a\u7684\u683c\u5f0f\u586b\u5165\u5c0d\u61c9\u7684\u503c\nmsg->setLength (8"),"packetSize); //? \u5c01\u5305\u88e1\u6c92\u5ba3\u544a"),(0,a.kt)("p",null,"sendToICMP (msg, destAddr, srcAddr, hopLimit);\n\u628a\u8a0a\u606f\u9001\u5230 ICMP \u88e1"),(0,a.kt)("p",null,"PingApp::scheduleNextPing(cMessage *timer)"),(0,a.kt)("p",null,"simtime_t nextPing = simTime () + intervalp->doubleValue ();\n\u6a21\u64ec\u6642\u9593\u52a0\u4e0a\u9593\u9694\u6642\u9593"),(0,a.kt)("p",null,"void PingApp::sendToICMP(cMessage *msg, const IPvXAddress& destAddr, const IPvXAddress","&"," srcAddr, int hopLimit)\n\u5224\u65b7\u9001\u51fa v4/v6 icmp \u683c\u5f0f\u5c01\u5305"),(0,a.kt)("p",null,"void PingApp::processPingResponse (PingPayload *msg)\n\u6536\u5230 ICMP \u5c01\u5305\uff0c\u5224\u65b7",(0,a.kt)("inlineCode",{parentName:"p"},"</pingpayload>")," v4/v6 \u4e26",(0,a.kt)("inlineCode",{parentName:"p"},"<pingpayload>"),"\u8655\u7406\n",(0,a.kt)("inlineCode",{parentName:"p"},"</pingpayload>")))}g.isMDXComponent=!0}}]);